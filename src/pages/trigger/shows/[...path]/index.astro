---
import Layout from "$layouts/Layout.astro"
import { getCollection, getEntryBySlug } from "astro:content"

import { shows, type ShowSong } from "../shows"

export async function getStaticPaths() {
  const songList = await getCollection("songs")
  return shows.flatMap((show) => {
    let songNo = 0
    const allSongs: Array<
      ShowSong & (typeof songList)[number] & { songNo: string }
    > = []
    const sets = show.sets.map((songs) =>
      songs.map((song) => {
        const found = songList.find((s) => s.slug === song.slug)
        if (!found) throw new Error(`Couldn't find song ${song.slug}`)

        allSongs.push({ ...found, songNo: String(++songNo), feat: song.feat })
        return {
          ...song,
          ...found.data,
          songNo,
        }
      }),
    )

    const showDetails = {
      ...show,
      sets,
      allSongs,
    }
    return [
      {
        params: { path: show.slug },

        props: { ...showDetails },
      },
      ...allSongs.map((s) => ({
        params: { path: `${show.slug}/${s.songNo}` },

        props: { ...showDetails },
      })),
    ]
  })
}

type Gsp = Awaited<ReturnType<typeof getStaticPaths>>[number]
type GspProps = Gsp["props"]
type GspParams = Gsp["params"]

interface Props extends GspProps {}

const { path } = Astro.params as GspParams
const { sets, allSongs } = Astro.props

const [show, songNo] = path.split("/") as [string, string | undefined]

const theSong = songNo ? allSongs.find((s) => s.songNo === songNo) : undefined

const pulledSong = theSong
  ? await getEntryBySlug("songs", theSong.slug)
  : undefined

const { Content } = (await pulledSong?.render()) ?? { Content: undefined }
const nextSongNum = theSong && Number(theSong.songNo) + 1
const prevSongNum = theSong && Number(theSong.songNo) - 1

const nextUrl =
  (nextSongNum ?? Number.POSITIVE_INFINITY) <= allSongs.length
    ? `/trigger/shows/${show}/${nextSongNum}`
    : undefined
const prevUrl =
  (prevSongNum ?? -1) > 0 ? `/trigger/shows/${show}/${prevSongNum}` : undefined
---

<Layout
  title={theSong ? `${show}: ${theSong.data.title}` : show}
  compact
  unconstrained
>
  <a href={`/trigger/shows/${show}`}>
    {show}
  </a>

  {
    theSong && Content && (
      <div class="markdown p-4 pt-20 bg-white/40 w-full">
        <div class="bg-white max-w-[1000px] m-auto z-10">
          <div class="mb-4">
            <a href={`/trigger/shows/${show}`} class="text-2xl">
              Close Song
            </a>
          </div>
          <div class="overflow-y-auto">
            <div class="flex w-full justify-between">
              {prevUrl ? (
                <a href={prevUrl}>← Previous Song</a>
              ) : (
                <span class="opacity-20">← Previous Song</span>
              )}
              <div>
                <h2 class="text-2xl">{theSong.data.title}</h2>
                <h3>lead vocals: {theSong.feat}</h3>
              </div>
              {nextUrl ? (
                <a href={nextUrl}>Next Song →</a>
              ) : (
                <span class="opacity-20">Next Song →</span>
              )}
            </div>
            {<Content />}
          </div>
        </div>
      </div>
    )
  }

  {
    sets.map((set, i) => (
      <div class="mt-12">
        <h2 class="text-2xl">Set {++i}</h2>
        <ol class="list-decimal pl-8 text-xl">
          {set.map((song) => (
            <li class="py-4">
              <div>
                <a href={`/trigger/shows/${show}/${song.songNo}`}>
                  <span class="min-w-[12rem] inline-block">{song.title}</span>
                </a>
                <strong>{song.feat}</strong>
              </div>
              <div>{song.reminder}</div>
            </li>
          ))}
        </ol>
      </div>
    ))
  }
</Layout>
