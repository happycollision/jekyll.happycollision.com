---
import { getCollection } from "astro:content"
import { urlsMatch } from "$lib/urls"
import Layout from "$layouts/Layout.astro"

import { shows } from "../shows"

export async function getStaticPaths() {
  function ensureArray<T>(x: T | T[]): T[] {
    return Array.isArray(x) ? x : [x]
  }
  const baseUrl = "/trigger/shows"
  const songList = await getCollection("songs")

  return shows.flatMap((show) => {
    let songNo = 0
    const sets = show.sets.map((songs) =>
      songs.map((song) => {
        const [slug, ...altSlugs] = ensureArray(song.slug)
        const found = songList.find((s) => s.slug === slug)
        if (!found) throw new Error(`Couldn't find song ${slug}`)

        const altsFound = altSlugs.map((alt) => {
          const altFound = songList.find((s) => s.slug === alt)
          if (!altFound)
            throw new Error(`Couldn't find alternative song ${alt}`)
          return altFound
        })

        return {
          ...song,
          ...found,
          songNo: ++songNo,
          altVersions: altsFound.map((alt) => ({
            ...song,
            ...alt,
            songNo,
          })),
        }
      }),
    )

    const baseProps = {
      showName: show.name,
      sets,
      showUrl: `${baseUrl}/${show.slug}`,
    }

    const allSongs = sets.flat()

    const baseRoute = {
      params: { path: show.slug },

      props: {
        ...baseProps,
        songDetails: undefined as
          | Omit<(typeof allSongs)[number], "altVersions">
          | undefined,
        thisUrl: baseProps.showUrl,
        nextUrl: undefined as string | undefined,
        prevUrl: undefined as string | undefined,
        altVersions: undefined as
          | { path: string; title: string | undefined }[]
          | undefined,
      },
    }

    return [
      baseRoute,
      ...allSongs.flatMap((s, i, arr): (typeof baseRoute)[] => {
        const { altVersions, ...details } = s

        const altProps = altVersions.length
          ? [
              {
                path: `${baseProps.showUrl}/${s.songNo}`,
                title: s.data.altTitle,
              },
              ...altVersions.map((alt) => ({
                path: `${baseProps.showUrl}/${s.songNo}/alt/${
                  alt.slug.split("_")[1]
                }`,
                title: alt.data.altTitle,
              })),
            ]
          : undefined

        const altsInfo = altVersions.map((alt) => ({
          params: {
            path: `${show.slug}/${s.songNo}/alt/${alt.slug.split("_")[1]}`,
          },

          props: {
            ...baseProps,
            songDetails: alt,
            thisUrl: `${baseProps.showUrl}/${s.songNo}/alt/${
              alt.slug.split("_")[1]
            }`,
            nextUrl:
              i < arr.length - 1
                ? `${baseProps.showUrl}/${s.songNo + 1}`
                : undefined,
            prevUrl: i > 0 ? `${baseProps.showUrl}/${s.songNo - 1}` : undefined,
            altVersions: altProps,
          },
        }))

        return [
          {
            params: { path: `${show.slug}/${s.songNo}` },

            props: {
              ...baseProps,
              songDetails: details,
              thisUrl: `${baseProps.showUrl}/${s.songNo}`,
              nextUrl:
                i < arr.length - 1
                  ? `${baseProps.showUrl}/${s.songNo + 1}`
                  : undefined,
              prevUrl:
                i > 0 ? `${baseProps.showUrl}/${s.songNo - 1}` : undefined,
              altVersions: altProps,
            },
          },
          ...altsInfo,
        ]
      }),
    ]
  })
}

type GspProps = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"]

interface Props extends GspProps {}

const { sets, songDetails, nextUrl, prevUrl, showUrl, showName, altVersions } =
  Astro.props

const { Content } = (await songDetails?.render()) ?? { Content: undefined }
---

<Layout
  title={songDetails ? `${songDetails.data.title} | ${showName}` : showName}
  compact
  unconstrained
>
  <div class="p-4 pt-0">
    <h1 class="text-2xl text-center border-b border-neutral-400 pb-4">
      <a href={showUrl} class="link">
        {showName}
      </a>
    </h1>

    <div class="flex flex-col lg:flex-row gap-4">
      {
        songDetails && Content && (
          <div class="mt-4 lg:order-1 lg:grow">
            <div class="mb-4">
              <a
                href={showUrl}
                class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500"
              >
                Close Song
              </a>
            </div>
            <div class="overflow-y-auto">
              <div class="flex flex-wrap w-full justify-between">
                <div>
                  {prevUrl ? (
                    <a href={prevUrl} class="link">
                      ← Previous Song
                    </a>
                  ) : (
                    <span class="opacity-20">← Previous Song</span>
                  )}
                </div>

                <div class="w-full order-1 lg:order-none lg:w-auto">
                  <h2 class="text-3xl">{songDetails.data.title}</h2>
                  <h3 class="text-xl">lead vocals: {songDetails.feat}</h3>
                </div>

                <div>
                  {nextUrl ? (
                    <a href={nextUrl} class="link">
                      Next Song →
                    </a>
                  ) : (
                    <span class="opacity-20">Next Song →</span>
                  )}
                </div>
              </div>

              {altVersions && (
                <div class="text-center mt-2">
                  <ul class="border border-blue-400 inline-flex rounded">
                    {altVersions.map((alt, i, arr) => {
                      const isLast = arr.length === i + 1
                      const isActive = urlsMatch(Astro.url.pathname, alt.path)
                      return (
                        <li class="flex">
                          <a
                            href={alt.path}
                            class={`px-2 py-1 ${
                              isLast ? "" : "border-r"
                            } border-blue-400 ${isActive ? "bg-blue-400" : ""}`}
                          >
                            {alt.title}
                          </a>
                        </li>
                      )
                    })}
                  </ul>
                </div>
              )}

              <div class="markdown text-xl mt-4 [&>pre]:whitespace-pre-wrap">
                <Content />
              </div>
            </div>
          </div>
        )
      }

      <div class="lg:w-96 shrink-0">
        {
          sets.map((set, i) => (
            <div class="mt-4">
              <h2 class="text-2xl mb-4">Set {++i}</h2>
              <ol class="list-decimal text-xl">
                {set.map((song) => {
                  const isActive =
                    urlsMatch(
                      Astro.url.pathname,
                      `${showUrl}/${song.songNo}`,
                    ) ||
                    Astro.url.pathname.startsWith(
                      `${showUrl}/${song.songNo}/alt`,
                    )

                  return (
                    <a
                      class={
                        "block " +
                        (isActive ? "bg-neutral-200" : "hover:bg-blue-200")
                      }
                      href={`${showUrl}/${song.songNo}`}
                    >
                      <li class="py-4 ml-12 pl-0">
                        <div>
                          <strong class="min-w-[4rem] inline-block">
                            {song.feat}
                          </strong>
                          <span class="link !no-underline">
                            {song.data.title}
                          </span>
                        </div>
                        {song.data.reminder && (
                          <div class="mt-2">{song.data.reminder}</div>
                        )}
                      </li>
                    </a>
                  )
                })}
              </ol>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
