---
import { getCollection } from "astro:content"
import Layout from "$layouts/Layout.astro"

import { shows } from "../shows"

export async function getStaticPaths() {
  const baseUrl = "/trigger/shows"
  const songList = await getCollection("songs")

  return shows.flatMap((show) => {
    let songNo = 0
    const sets = show.sets.map((songs) =>
      songs.map((song) => {
        const found = songList.find((s) => s.slug === song.slug)
        if (!found) throw new Error(`Couldn't find song ${song.slug}`)

        return {
          ...song,
          ...found,
          songNo: ++songNo,
        }
      }),
    )

    const baseProps = {
      showName: show.name,
      sets,
      showUrl: `${baseUrl}/${show.slug}`,
    }

    const allSongs = sets.flat()
    return [
      {
        params: { path: show.slug },

        props: {
          ...baseProps,
          songDetails: undefined as (typeof allSongs)[number] | undefined,
          nextUrl: undefined as string | undefined,
          prevUrl: undefined as string | undefined,
        },
      },
      ...allSongs.map((s, i, arr) => ({
        params: { path: `${show.slug}/${s.songNo}` },

        props: {
          ...baseProps,
          songDetails: s,
          nextUrl:
            i < arr.length - 1
              ? `${baseUrl}/${show.slug}/${s.songNo + 1}`
              : undefined,
          prevUrl:
            i > 0 ? `${baseUrl}/${show.slug}/${s.songNo - 1}` : undefined,
        },
      })),
    ]
  })
}

type GspProps = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"]

interface Props extends GspProps {}

const { sets, songDetails, nextUrl, prevUrl, showUrl, showName } = Astro.props

const { Content } = (await songDetails?.render()) ?? { Content: undefined }
---

<Layout
  title={songDetails ? `${songDetails.data.title} | ${showName}` : showName}
  compact
  unconstrained
>
  <div class="p-4 pt-0">
    <h1 class="text-2xl text-center border-b border-neutral-400 pb-4">
      <a href={showUrl} class="link">
        {showName}
      </a>
    </h1>

    <div class="flex flex-col md:flex-row gap-4">
      {
        songDetails && Content && (
          <div class="mt-4 md:order-1">
            <div class="mb-4">
              <a
                href={showUrl}
                class="text-xl bg-neutral-200 rounded py-1 px-2 hover:bg-neutral-400"
              >
                Close Song
              </a>
            </div>
            <div class="overflow-y-auto">
              <div class="flex flex-wrap w-full justify-between">
                <div>
                  {prevUrl ? (
                    <a href={prevUrl} class="link">
                      ← Previous Song
                    </a>
                  ) : (
                    <span class="opacity-20">← Previous Song</span>
                  )}
                </div>

                <div class="w-full order-1">
                  <h2 class="text-3xl">{songDetails.data.title}</h2>
                  <h3 class="text-xl">lead vocals: {songDetails.feat}</h3>
                </div>

                <div>
                  {nextUrl ? (
                    <a href={nextUrl} class="link">
                      Next Song →
                    </a>
                  ) : (
                    <span class="opacity-20">Next Song →</span>
                  )}
                </div>
              </div>
              <div class="markdown text-xl mt-4 [&>pre]:whitespace-pre-wrap">
                <Content />
              </div>
            </div>
          </div>
        )
      }

      <div>
        {
          sets.map((set, i) => (
            <div class="mt-4">
              <h2 class="text-2xl">Set {++i}</h2>
              <ol class="list-decimal pl-8 text-xl">
                {set.map((song) => (
                  <li class="py-4">
                    <div>
                      <a class="link" href={`${showUrl}/${song.songNo}`}>
                        <span class="min-w-[12rem] inline-block">
                          {song.data.title}
                        </span>
                      </a>
                      <strong>{song.feat}</strong>
                    </div>
                    <div>{song.data.reminder}</div>
                  </li>
                ))}
              </ol>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
