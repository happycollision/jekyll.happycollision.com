---
import { getCollection } from "astro:content"
import Layout from "$layouts/Layout.astro"

import { shows } from "../shows"

export async function getStaticPaths() {
  const baseUrl = "/trigger/shows"
  const songList = await getCollection("songs")

  return shows.flatMap((show) => {
    let songNo = 0
    const sets = show.sets.map((songs) =>
      songs.map((song) => {
        const found = songList.find((s) => s.slug === song.slug)
        if (!found) throw new Error(`Couldn't find song ${song.slug}`)

        return {
          ...song,
          ...found,
          songNo: ++songNo,
        }
      }),
    )

    const baseProps = {
      showName: show.name,
      sets,
      showUrl: `${baseUrl}/${show.slug}`,
    }

    const allSongs = sets.flat()
    return [
      {
        params: { path: show.slug },

        props: {
          ...baseProps,
          songDetails: undefined as (typeof allSongs)[number] | undefined,
          nextUrl: undefined as string | undefined,
          prevUrl: undefined as string | undefined,
        },
      },
      ...allSongs.map((s, i, arr) => ({
        params: { path: `${show.slug}/${s.songNo}` },

        props: {
          ...baseProps,
          songDetails: s,
          nextUrl:
            i < arr.length - 1
              ? `${baseUrl}/${show.slug}/${s.songNo + 1}`
              : undefined,
          prevUrl:
            i > 0 ? `${baseUrl}/${show.slug}/${s.songNo - 1}` : undefined,
        },
      })),
    ]
  })
}

type GspProps = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"]

interface Props extends GspProps {}

const { sets, songDetails, nextUrl, prevUrl, showUrl, showName } = Astro.props

const { Content } = (await songDetails?.render()) ?? { Content: undefined }
---

<Layout
  title={songDetails ? `${songDetails.data.title} | ${showName}` : showName}
  compact
  unconstrained
>
  <a href={showUrl}>
    {showName}
  </a>

  {
    songDetails && Content && (
      <div class="markdown p-4 pt-20 bg-white/40 w-full">
        <div class="bg-white max-w-[1000px] m-auto z-10">
          <div class="mb-4">
            <a href={showUrl} class="text-2xl">
              Close Song
            </a>
          </div>
          <div class="overflow-y-auto">
            <div class="flex w-full justify-between">
              {prevUrl ? (
                <a href={prevUrl}>← Previous Song</a>
              ) : (
                <span class="opacity-20">← Previous Song</span>
              )}
              <div>
                <h2 class="text-2xl">{songDetails.data.title}</h2>
                <h3>lead vocals: {songDetails.feat}</h3>
              </div>
              {nextUrl ? (
                <a href={nextUrl}>Next Song →</a>
              ) : (
                <span class="opacity-20">Next Song →</span>
              )}
            </div>
            {<Content />}
          </div>
        </div>
      </div>
    )
  }

  {
    sets.map((set, i) => (
      <div class="mt-12">
        <h2 class="text-2xl">Set {++i}</h2>
        <ol class="list-decimal pl-8 text-xl">
          {set.map((song) => (
            <li class="py-4">
              <div>
                <a href={`${showUrl}/${song.songNo}`}>
                  <span class="min-w-[12rem] inline-block">
                    {song.data.title}
                  </span>
                </a>
                <strong>{song.feat}</strong>
              </div>
              <div>{song.data.reminder}</div>
            </li>
          ))}
        </ol>
      </div>
    ))
  }
</Layout>
